// Generated by Haxe 4.1.3

#pragma warning disable 109, 114, 219, 429, 168, 162
public class TestControl_STATE : global::haxe.lang.Enum {
	
	protected TestControl_STATE(int index) : base(index) {
	}
	
	
	public static readonly global::TestControl_STATE none = new global::TestControl_STATE_none();
	
	public static readonly global::TestControl_STATE S_0000 = new global::TestControl_STATE_S_0000();
	
	public static readonly global::TestControl_STATE S_0001 = new global::TestControl_STATE_S_0001();
	
	public static readonly global::TestControl_STATE S_0002 = new global::TestControl_STATE_S_0002();
	
	public static readonly global::TestControl_STATE S_0003 = new global::TestControl_STATE_S_0003();
	
	public static readonly global::TestControl_STATE S_0004 = new global::TestControl_STATE_S_0004();
	
	public static readonly global::TestControl_STATE S_0005 = new global::TestControl_STATE_S_0005();
	
	public static readonly global::TestControl_STATE S_0006 = new global::TestControl_STATE_S_0006();
	
	public static readonly global::TestControl_STATE S_0007 = new global::TestControl_STATE_S_0007();
	
	public static readonly global::TestControl_STATE S_0008 = new global::TestControl_STATE_S_0008();
	
	public static readonly global::TestControl_STATE S_END = new global::TestControl_STATE_S_END();
	
	public static readonly global::TestControl_STATE S_GSB000 = new global::TestControl_STATE_S_GSB000();
	
	public static readonly global::TestControl_STATE S_LOP000 = new global::TestControl_STATE_S_LOP000();
	
	public static readonly global::TestControl_STATE S_LOP000_Check____ = new global::TestControl_STATE_S_LOP000_Check____();
	
	public static readonly global::TestControl_STATE S_LOP000_Next____ = new global::TestControl_STATE_S_LOP000_Next____();
	
	public static readonly global::TestControl_STATE S_RET000 = new global::TestControl_STATE_S_RET000();
	
	public static readonly global::TestControl_STATE S_RET001 = new global::TestControl_STATE_S_RET001();
	
	public static readonly global::TestControl_STATE S_SBS000 = new global::TestControl_STATE_S_SBS000();
	
	public static readonly global::TestControl_STATE S_SBS001 = new global::TestControl_STATE_S_SBS001();
	
	public static readonly global::TestControl_STATE S_START = new global::TestControl_STATE_S_START();
	
	public static readonly global::TestControl_STATE S_WAIT1SEC = new global::TestControl_STATE_S_WAIT1SEC();
	
	public static readonly global::TestControl_STATE unknown = new global::TestControl_STATE_unknown();
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_none : global::TestControl_STATE {
	
	public TestControl_STATE_none() : base(0) {
	}
	
	
	public override string getTag() {
		return "none";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0000 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0000() : base(1) {
	}
	
	
	public override string getTag() {
		return "S_0000";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0001 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0001() : base(2) {
	}
	
	
	public override string getTag() {
		return "S_0001";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0002 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0002() : base(3) {
	}
	
	
	public override string getTag() {
		return "S_0002";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0003 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0003() : base(4) {
	}
	
	
	public override string getTag() {
		return "S_0003";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0004 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0004() : base(5) {
	}
	
	
	public override string getTag() {
		return "S_0004";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0005 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0005() : base(6) {
	}
	
	
	public override string getTag() {
		return "S_0005";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0006 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0006() : base(7) {
	}
	
	
	public override string getTag() {
		return "S_0006";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0007 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0007() : base(8) {
	}
	
	
	public override string getTag() {
		return "S_0007";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_0008 : global::TestControl_STATE {
	
	public TestControl_STATE_S_0008() : base(9) {
	}
	
	
	public override string getTag() {
		return "S_0008";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_END : global::TestControl_STATE {
	
	public TestControl_STATE_S_END() : base(10) {
	}
	
	
	public override string getTag() {
		return "S_END";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_GSB000 : global::TestControl_STATE {
	
	public TestControl_STATE_S_GSB000() : base(11) {
	}
	
	
	public override string getTag() {
		return "S_GSB000";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_LOP000 : global::TestControl_STATE {
	
	public TestControl_STATE_S_LOP000() : base(12) {
	}
	
	
	public override string getTag() {
		return "S_LOP000";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_LOP000_Check____ : global::TestControl_STATE {
	
	public TestControl_STATE_S_LOP000_Check____() : base(13) {
	}
	
	
	public override string getTag() {
		return "S_LOP000_Check____";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_LOP000_Next____ : global::TestControl_STATE {
	
	public TestControl_STATE_S_LOP000_Next____() : base(14) {
	}
	
	
	public override string getTag() {
		return "S_LOP000_Next____";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_RET000 : global::TestControl_STATE {
	
	public TestControl_STATE_S_RET000() : base(15) {
	}
	
	
	public override string getTag() {
		return "S_RET000";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_RET001 : global::TestControl_STATE {
	
	public TestControl_STATE_S_RET001() : base(16) {
	}
	
	
	public override string getTag() {
		return "S_RET001";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_SBS000 : global::TestControl_STATE {
	
	public TestControl_STATE_S_SBS000() : base(17) {
	}
	
	
	public override string getTag() {
		return "S_SBS000";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_SBS001 : global::TestControl_STATE {
	
	public TestControl_STATE_S_SBS001() : base(18) {
	}
	
	
	public override string getTag() {
		return "S_SBS001";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_START : global::TestControl_STATE {
	
	public TestControl_STATE_S_START() : base(19) {
	}
	
	
	public override string getTag() {
		return "S_START";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_S_WAIT1SEC : global::TestControl_STATE {
	
	public TestControl_STATE_S_WAIT1SEC() : base(20) {
	}
	
	
	public override string getTag() {
		return "S_WAIT1SEC";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class TestControl_STATE_unknown : global::TestControl_STATE {
	
	public TestControl_STATE_unknown() : base(21) {
	}
	
	
	public override string getTag() {
		return "unknown";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class TestControl : global::haxe.lang.HxObject {
	
	public TestControl(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public TestControl() {
		global::TestControl.__hx_ctor__TestControl(this);
	}
	
	
	protected static void __hx_ctor__TestControl(global::TestControl __hx_this) {
		unchecked {
			__hx_this.m_callstack_level = 0;
			__hx_this.MAX_CALLSTACK = 10;
			{
				__hx_this.m_curfunc = global::TestControl_STATE.none;
				__hx_this.m_nextfunc = global::TestControl_STATE.none;
				global::Array<object> _g = new global::Array<object>(new object[]{});
				{
					int _g1 = 0;
					int _g2 = __hx_this.MAX_CALLSTACK;
					while (( _g1 < _g2 )) {
						int i = _g1++;
						_g.push(global::TestControl_STATE.none);
					}
					
				}
				
				__hx_this.m_callstacks = _g;
				global::haxe.ds.EnumValueMap<object, object> _g3 = new global::haxe.ds.EnumValueMap<object, object>();
				_g3.@set(global::TestControl_STATE.S_0000, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0000", 42918572)) ));
				_g3.@set(global::TestControl_STATE.S_0001, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0001", 42918573)) ));
				_g3.@set(global::TestControl_STATE.S_0002, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0002", 42918574)) ));
				_g3.@set(global::TestControl_STATE.S_0003, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0003", 42918575)) ));
				_g3.@set(global::TestControl_STATE.S_0004, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0004", 42918576)) ));
				_g3.@set(global::TestControl_STATE.S_0005, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0005", 42918577)) ));
				_g3.@set(global::TestControl_STATE.S_0006, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0006", 42918578)) ));
				_g3.@set(global::TestControl_STATE.S_0007, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0007", 42918579)) ));
				_g3.@set(global::TestControl_STATE.S_0008, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_0008", 42918580)) ));
				_g3.@set(global::TestControl_STATE.S_END, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_END", 155323023)) ));
				_g3.@set(global::TestControl_STATE.S_GSB000, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_GSB000", 1395622150)) ));
				_g3.@set(global::TestControl_STATE.S_LOP000, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_LOP000", 245299599)) ));
				_g3.@set(global::TestControl_STATE.S_LOP000_Check____, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_LOP000_Check____", 943573240)) ));
				_g3.@set(global::TestControl_STATE.S_LOP000_Next____, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_LOP000_Next____", 656521411)) ));
				_g3.@set(global::TestControl_STATE.S_RET000, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_RET000", 895889723)) ));
				_g3.@set(global::TestControl_STATE.S_RET001, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_RET001", 895889724)) ));
				_g3.@set(global::TestControl_STATE.S_SBS000, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_SBS000", 1625594232)) ));
				_g3.@set(global::TestControl_STATE.S_SBS001, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_SBS001", 1625594233)) ));
				_g3.@set(global::TestControl_STATE.S_START, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_START", 2035708950)) ));
				_g3.@set(global::TestControl_STATE.S_WAIT1SEC, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "S_WAIT1SEC", 1294696833)) ));
				{
					global::haxe.lang.Function @value = null;
					_g3.@set(global::TestControl_STATE.unknown, @value);
				}
				
				__hx_this.m_funcmap = _g3;
			}
			
		}
	}
	
	
	public global::TestControl_STATE m_curfunc;
	
	public global::TestControl_STATE m_nextfunc;
	
	public bool m_noWait;
	
	public global::haxe.ds.EnumValueMap<object, object> m_funcmap;
	
	public virtual void Update() {
		while (true) {
			bool bFirst = false;
			if (( this.m_nextfunc != global::TestControl_STATE.none )) {
				this.m_curfunc = this.m_nextfunc;
				this.m_nextfunc = global::TestControl_STATE.none;
				bFirst = true;
			}
			
			this.m_noWait = false;
			if (( this.m_curfunc != global::TestControl_STATE.none )) {
				((global::haxe.lang.Function) ((((global::haxe.ds.EnumValueMap<object, object>) (global::haxe.ds.EnumValueMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.EnumValueMap) (((global::haxe.IMap<object, object>) (this.m_funcmap) )) ))) ).@get(this.m_curfunc)).@value) ).__hx_invoke1_o(default(double), bFirst);
			}
			
			if ( ! (this.m_noWait) ) {
				break;
			}
			
		}
		
	}
	
	
	public virtual void Goto(global::TestControl_STATE func) {
		this.m_nextfunc = func;
	}
	
	
	public virtual bool CheckState(global::TestControl_STATE func) {
		return ( this.m_curfunc == func );
	}
	
	
	public virtual bool HasNextState() {
		return ( this.m_nextfunc != global::TestControl_STATE.none );
	}
	
	
	public virtual void NoWait() {
		this.m_noWait = true;
	}
	
	
	public int MAX_CALLSTACK;
	
	public global::Array<object> m_callstacks;
	
	public int m_callstack_level;
	
	public virtual void GoSubState(global::TestControl_STATE nextstate, global::TestControl_STATE returnstate) {
		unchecked {
			if (( this.m_callstack_level >= ( this.MAX_CALLSTACK - 1 ) )) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "CALL STACK OVERFLOW", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"GoSubState", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
				return;
			}
			
			this.m_callstacks[this.m_callstack_level] = returnstate;
			this.m_callstack_level += 1;
			this.Goto(nextstate);
		}
	}
	
	
	public virtual void ReturnState() {
		unchecked {
			if (( this.m_callstack_level <= 0 )) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "CALL STACK UNDERFLOW", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"ReturnState", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
				return;
			}
			
			this.m_callstack_level -= 1;
			global::TestControl_STATE nextstate = ((global::TestControl_STATE) (this.m_callstacks[this.m_callstack_level]) );
			this.Goto(nextstate);
		}
	}
	
	
	public virtual void Start() {
		this.Goto(global::TestControl_STATE.S_START);
	}
	
	
	public virtual bool IsEnd() {
		return this.CheckState(global::TestControl_STATE.S_END);
	}
	
	
	public virtual void Run() {
		unchecked {
			int LOOPMAX = 100000;
			bool bEnd = false;
			this.Start();
			{
				int _g = 0;
				int _g1 = LOOPMAX;
				while (( _g < _g1 )) {
					int loop_1 = _g++;
					if (bEnd) {
						break;
					}
					
					if (( loop_1 >= ( LOOPMAX - 1 ) )) {
						global::haxe.Log.trace.__hx_invoke2_o(default(double), "OUT OF LOOP. INCREASE LOOPMAX OR MODIFY USING WHILE", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"Run", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
					}
					
					{
						int _g2 = 0;
						int _g3 = LOOPMAX;
						while (( _g2 < _g3 )) {
							int loop_2 = _g2++;
							this.Update();
							bEnd = this.IsEnd();
							if (bEnd) {
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
		}
	}
	
	
	public string m_msg;
	
	public virtual void S_0000(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "Hello World!", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0000", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (186) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_0008);
			}
			
		}
	}
	
	
	public int m_val;
	
	public virtual void S_0001(bool bFirst) {
		unchecked {
			int sec = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) )).date.Second;
			int n = ( sec % 5 );
			this.m_val = n;
			if (( n == 0 )) {
				this.Goto(global::TestControl_STATE.S_0002);
			}
			else if (( n == 1 )) {
				this.Goto(global::TestControl_STATE.S_0003);
			}
			else if (( n == 2 )) {
				this.Goto(global::TestControl_STATE.S_0004);
			}
			else if (( n == 3 )) {
				this.Goto(global::TestControl_STATE.S_0005);
			}
			else {
				this.Goto(global::TestControl_STATE.S_0006);
			}
			
		}
	}
	
	
	public virtual void S_0002(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "Zero", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0002", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (218) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_WAIT1SEC);
			}
			
		}
	}
	
	
	public virtual void S_0003(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "First", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0003", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (234) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_WAIT1SEC);
			}
			
		}
	}
	
	
	public virtual void S_0004(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "Two", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0004", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (250) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_WAIT1SEC);
			}
			
		}
	}
	
	
	public virtual void S_0005(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "Three", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0005", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (266) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_WAIT1SEC);
			}
			
		}
	}
	
	
	public virtual void S_0006(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(this.m_val)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0006", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (282) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_WAIT1SEC);
			}
			
		}
	}
	
	
	public virtual void S_0007(bool bFirst) {
		unchecked {
			if (bFirst) {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "In Subroutine!", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0007", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (298) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_RET000);
			}
			
		}
	}
	
	
	public virtual void S_0008(bool bFirst) {
		unchecked {
			if (bFirst) {
				this.m_msg = "Use m_msg.";
				global::haxe.Log.trace.__hx_invoke2_o(default(double), this.m_msg, default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"S_0008", "TestControl", "src/TestControl.hx"}, new int[]{1981972957}, new double[]{((double) (315) )}));
			}
			
			if ( ! (this.HasNextState()) ) {
				this.Goto(global::TestControl_STATE.S_GSB000);
			}
			
		}
	}
	
	
	public virtual void S_END(bool bFirst) {
	}
	
	
	public virtual void S_GSB000(bool bFirst) {
		this.GoSubState(global::TestControl_STATE.S_SBS000, global::TestControl_STATE.S_LOP000);
		this.NoWait();
	}
	
	
	public int m_index;
	
	public virtual void S_LOP000(bool bFirst) {
		this.m_index = 0;
		this.Goto(global::TestControl_STATE.S_LOP000_Check____);
		this.NoWait();
	}
	
	
	public virtual void S_LOP000_Check____(bool bFirst) {
		unchecked {
			if (( this.m_index < 10 )) {
				this.GoSubState(global::TestControl_STATE.S_SBS001, global::TestControl_STATE.S_LOP000_Next____);
			}
			else {
				this.Goto(global::TestControl_STATE.S_END);
			}
			
			this.NoWait();
		}
	}
	
	
	public virtual void S_LOP000_Next____(bool bFirst) {
		this.m_index++;
		this.Goto(global::TestControl_STATE.S_LOP000_Check____);
		this.NoWait();
	}
	
	
	public virtual void S_RET000(bool bFirst) {
		this.ReturnState();
		this.NoWait();
	}
	
	
	public virtual void S_RET001(bool bFirst) {
		this.ReturnState();
		this.NoWait();
	}
	
	
	public virtual void S_SBS000(bool bFirst) {
		this.Goto(global::TestControl_STATE.S_0007);
		this.NoWait();
	}
	
	
	public virtual void S_SBS001(bool bFirst) {
		this.Goto(global::TestControl_STATE.S_0001);
		this.NoWait();
	}
	
	
	public virtual void S_START(bool bFirst) {
		this.Goto(global::TestControl_STATE.S_0000);
		this.NoWait();
	}
	
	
	public int m_S_WAIT1SEC;
	
	public virtual void S_WAIT1SEC(bool bFirst) {
		if (bFirst) {
			this.m_S_WAIT1SEC = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) )).date.Second;
		}
		
		if (( this.m_S_WAIT1SEC == new global::Date(((global::System.DateTime) (global::System.DateTime.Now) )).date.Second )) {
			return;
		}
		
		if ( ! (this.HasNextState()) ) {
			this.Goto(global::TestControl_STATE.S_RET001);
		}
		
	}
	
	
	public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 506919763:
				{
					this.m_S_WAIT1SEC = ((int) (@value) );
					return @value;
				}
				
				
				case 1855943296:
				{
					this.m_index = ((int) (@value) );
					return @value;
				}
				
				
				case 30564047:
				{
					this.m_val = ((int) (@value) );
					return @value;
				}
				
				
				case 419997469:
				{
					this.m_callstack_level = ((int) (@value) );
					return @value;
				}
				
				
				case 1292742927:
				{
					this.MAX_CALLSTACK = ((int) (@value) );
					return @value;
				}
				
				
				default:
				{
					return base.__hx_setField_f(field, hash, @value, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 506919763:
				{
					this.m_S_WAIT1SEC = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					return @value;
				}
				
				
				case 1855943296:
				{
					this.m_index = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					return @value;
				}
				
				
				case 30564047:
				{
					this.m_val = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					return @value;
				}
				
				
				case 30120495:
				{
					this.m_msg = global::haxe.lang.Runtime.toString(@value);
					return @value;
				}
				
				
				case 419997469:
				{
					this.m_callstack_level = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					return @value;
				}
				
				
				case 1301665051:
				{
					this.m_callstacks = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
					return @value;
				}
				
				
				case 1292742927:
				{
					this.MAX_CALLSTACK = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					return @value;
				}
				
				
				case 2074579142:
				{
					this.m_funcmap = ((global::haxe.ds.EnumValueMap<object, object>) (global::haxe.ds.EnumValueMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.EnumValueMap) (@value) ))) );
					return @value;
				}
				
				
				case 1736000552:
				{
					this.m_noWait = global::haxe.lang.Runtime.toBool(@value);
					return @value;
				}
				
				
				case 738420489:
				{
					this.m_nextfunc = ((global::TestControl_STATE) (@value) );
					return @value;
				}
				
				
				case 1317224370:
				{
					this.m_curfunc = ((global::TestControl_STATE) (@value) );
					return @value;
				}
				
				
				default:
				{
					return base.__hx_setField(field, hash, @value, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 1294696833:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_WAIT1SEC", 1294696833)) );
				}
				
				
				case 506919763:
				{
					return this.m_S_WAIT1SEC;
				}
				
				
				case 2035708950:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_START", 2035708950)) );
				}
				
				
				case 1625594233:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_SBS001", 1625594233)) );
				}
				
				
				case 1625594232:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_SBS000", 1625594232)) );
				}
				
				
				case 895889724:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_RET001", 895889724)) );
				}
				
				
				case 895889723:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_RET000", 895889723)) );
				}
				
				
				case 656521411:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_LOP000_Next____", 656521411)) );
				}
				
				
				case 943573240:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_LOP000_Check____", 943573240)) );
				}
				
				
				case 245299599:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_LOP000", 245299599)) );
				}
				
				
				case 1855943296:
				{
					return this.m_index;
				}
				
				
				case 1395622150:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_GSB000", 1395622150)) );
				}
				
				
				case 155323023:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_END", 155323023)) );
				}
				
				
				case 42918580:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0008", 42918580)) );
				}
				
				
				case 42918579:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0007", 42918579)) );
				}
				
				
				case 42918578:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0006", 42918578)) );
				}
				
				
				case 42918577:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0005", 42918577)) );
				}
				
				
				case 42918576:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0004", 42918576)) );
				}
				
				
				case 42918575:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0003", 42918575)) );
				}
				
				
				case 42918574:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0002", 42918574)) );
				}
				
				
				case 42918573:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0001", 42918573)) );
				}
				
				
				case 30564047:
				{
					return this.m_val;
				}
				
				
				case 42918572:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "S_0000", 42918572)) );
				}
				
				
				case 30120495:
				{
					return this.m_msg;
				}
				
				
				case 4103979:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Run", 4103979)) );
				}
				
				
				case 1417190897:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "IsEnd", 1417190897)) );
				}
				
				
				case 389604418:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Start", 389604418)) );
				}
				
				
				case 1964694305:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ReturnState", 1964694305)) );
				}
				
				
				case 506482393:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "GoSubState", 506482393)) );
				}
				
				
				case 419997469:
				{
					return this.m_callstack_level;
				}
				
				
				case 1301665051:
				{
					return this.m_callstacks;
				}
				
				
				case 1292742927:
				{
					return this.MAX_CALLSTACK;
				}
				
				
				case 1394347894:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "NoWait", 1394347894)) );
				}
				
				
				case 11846020:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "HasNextState", 11846020)) );
				}
				
				
				case 179076169:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "CheckState", 179076169)) );
				}
				
				
				case 792905155:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Goto", 792905155)) );
				}
				
				
				case 999946793:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Update", 999946793)) );
				}
				
				
				case 2074579142:
				{
					return this.m_funcmap;
				}
				
				
				case 1736000552:
				{
					return this.m_noWait;
				}
				
				
				case 738420489:
				{
					return this.m_nextfunc;
				}
				
				
				case 1317224370:
				{
					return this.m_curfunc;
				}
				
				
				default:
				{
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 506919763:
				{
					return ((double) (this.m_S_WAIT1SEC) );
				}
				
				
				case 1855943296:
				{
					return ((double) (this.m_index) );
				}
				
				
				case 30564047:
				{
					return ((double) (this.m_val) );
				}
				
				
				case 419997469:
				{
					return ((double) (this.m_callstack_level) );
				}
				
				
				case 1292742927:
				{
					return ((double) (this.MAX_CALLSTACK) );
				}
				
				
				default:
				{
					return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_invokeField(string field, int hash, object[] dynargs) {
		unchecked {
			switch (hash) {
				case 1294696833:
				{
					this.S_WAIT1SEC(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 2035708950:
				{
					this.S_START(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 1625594233:
				{
					this.S_SBS001(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 1625594232:
				{
					this.S_SBS000(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 895889724:
				{
					this.S_RET001(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 895889723:
				{
					this.S_RET000(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 656521411:
				{
					this.S_LOP000_Next____(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 943573240:
				{
					this.S_LOP000_Check____(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 245299599:
				{
					this.S_LOP000(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 1395622150:
				{
					this.S_GSB000(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 155323023:
				{
					this.S_END(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918580:
				{
					this.S_0008(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918579:
				{
					this.S_0007(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918578:
				{
					this.S_0006(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918577:
				{
					this.S_0005(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918576:
				{
					this.S_0004(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918575:
				{
					this.S_0003(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918574:
				{
					this.S_0002(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918573:
				{
					this.S_0001(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 42918572:
				{
					this.S_0000(global::haxe.lang.Runtime.toBool(dynargs[0]));
					break;
				}
				
				
				case 4103979:
				{
					this.Run();
					break;
				}
				
				
				case 1417190897:
				{
					return this.IsEnd();
				}
				
				
				case 389604418:
				{
					this.Start();
					break;
				}
				
				
				case 1964694305:
				{
					this.ReturnState();
					break;
				}
				
				
				case 506482393:
				{
					this.GoSubState(((global::TestControl_STATE) (dynargs[0]) ), ((global::TestControl_STATE) (dynargs[1]) ));
					break;
				}
				
				
				case 1394347894:
				{
					this.NoWait();
					break;
				}
				
				
				case 11846020:
				{
					return this.HasNextState();
				}
				
				
				case 179076169:
				{
					return this.CheckState(((global::TestControl_STATE) (dynargs[0]) ));
				}
				
				
				case 792905155:
				{
					this.Goto(((global::TestControl_STATE) (dynargs[0]) ));
					break;
				}
				
				
				case 999946793:
				{
					this.Update();
					break;
				}
				
				
				default:
				{
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			return null;
		}
	}
	
	
	public override void __hx_getFields(global::Array<string> baseArr) {
		baseArr.push("m_S_WAIT1SEC");
		baseArr.push("m_index");
		baseArr.push("m_val");
		baseArr.push("m_msg");
		baseArr.push("m_callstack_level");
		baseArr.push("m_callstacks");
		baseArr.push("MAX_CALLSTACK");
		baseArr.push("m_funcmap");
		baseArr.push("m_noWait");
		baseArr.push("m_nextfunc");
		baseArr.push("m_curfunc");
		base.__hx_getFields(baseArr);
	}
	
	
}


